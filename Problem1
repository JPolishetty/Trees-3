/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if(root == null){
            return result;
        }
        //doing dfs, and changing target sum to targetSum-root.val and at leaf node if targetsum is 0, add it to result
        dfs(root, targetSum, new ArrayList<>());
        return result;
    }
    private void dfs(TreeNode root, int targetSum, List<Integer> nodes){
        if(root == null){
            return;
        }
        nodes.add(root.val);
        if(root.left == null && root.right == null && targetSum == root.val){
            //as list is mutable, add copy of list
            result.add(new ArrayList<>(nodes));
        }
        dfs(root.left, targetSum-root.val, nodes);
        dfs(root.right, targetSum-root.val, nodes);
        nodes.remove(nodes.size() - 1);     //backtrack
    }
}
